import { Inbox, Search } from '@mui/icons-material';
import { 
   Drawer, 
   List, 
   ListItem, 
   ListItemText, 
   Typography, 
   useTheme, 
   Box,
   InputAdornment,
   TextField,
   alpha
} from '@mui/material';
import { NavLink } from 'react-router-dom';

import type { DrawerComponentProps } from './types';
import style from './drawer.module.css';
import { config } from './config';
import { Fragment, useState, useMemo } from 'react';
import { useThemeContext } from '../../providers/theme-context.provider';

export const DrawerComponent = ({ open, ...rest }: DrawerComponentProps) => {
   const { palette } = useTheme();
   const { mode } = useThemeContext();
   const [searchTerm, setSearchTerm] = useState('');

   const isDarkMode = mode === 'dark';
   
   const filteredConfig = useMemo(() => {
      if (!searchTerm.trim()) return config;
      
      const lowerSearchTerm = searchTerm.toLowerCase();
      return config.filter(item => 
         item.name.toLowerCase().includes(lowerSearchTerm)
      );
   }, [searchTerm]);

   return (
      <Drawer
         open={open}
         sx={{
            '& .MuiDrawer-paper': {
               width: '250px',
               bgcolor: 'background.default',
               color: 'text.primary',
               transition: palette.mode === 'dark'
                  ? 'background-color 0.2s ease, color 0.2s ease, box-shadow 0.2s ease'
                  : 'background-color 0.2s ease, color 0.2s ease, box-shadow 0.2s ease',
               borderRight: `1px solid ${mode === 'dark' ? 'rgba(255, 255, 255, 0.12)' : 'rgba(0, 0, 0, 0.12)'}`,
               // Custom scrollbar styling
               '&::-webkit-scrollbar': {
                  width: '6px',
                  backgroundColor: 'transparent',
               },
               '&::-webkit-scrollbar-thumb': {
                  backgroundColor: isDarkMode ? 'rgba(255, 255, 255, 0.2)' : 'rgba(0, 0, 0, 0.2)',
                  borderRadius: '3px',
                  '&:hover': {
                     backgroundColor: isDarkMode ? 'rgba(255, 255, 255, 0.3)' : 'rgba(0, 0, 0, 0.3)',
                  },
               },
               '&::-webkit-scrollbar-track': {
                  backgroundColor: 'transparent',
               },
            }
         }}
         {...rest}
      >
         <Box sx={{ borderBottom: 1, borderColor: 'divider', py: 1.5, px: 2 }}>
            <Typography variant="h6" component="div" sx={{ fontWeight: 600 }}>
               CubeX
            </Typography>
         </Box>
         
         {/* Search input */}
         <Box sx={{ px: 2, pt: 2, pb: 1 }}>
            <TextField
               size="small"
               fullWidth
               placeholder="Search..."
               value={searchTerm}
               onChange={(e) => setSearchTerm(e.target.value)}
               InputProps={{
                  startAdornment: (
                     <InputAdornment position="start">
                        <Search fontSize="small" sx={{ color: 'text.secondary' }} />
                     </InputAdornment>
                  ),
                  sx: {
                     bgcolor: isDarkMode ? alpha(palette.common.white, 0.05) : alpha(palette.common.black, 0.04),
                     borderRadius: 1,
                     '& .MuiOutlinedInput-notchedOutline': {
                        border: 'none'
                     },
                     '&:hover .MuiOutlinedInput-notchedOutline': {
                        border: 'none'
                     },
                     '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
                        border: `1px solid ${palette.primary.main}`,
                     },
                  }
               }}
            />
         </Box>

         <List sx={{ pt: 1 }}>
            {filteredConfig.map(({ id, name, path, category }) => (
               <Fragment key={id}>
                  {category ? (
                     <Typography
                        sx={{
                           color: 'text.secondary',
                           fontSize: '0.75rem',
                           fontWeight: 500,
                           padding: '8px 16px 4px',
                           textTransform: 'uppercase',
                           letterSpacing: '0.08em'
                        }}
                     >
                        {category}
                     </Typography>
                  ) : null}
                  <ListItem disablePadding sx={{ cursor: 'pointer' }}>
                     <NavLink
                        end
                        to={path}
                        className={style.navlink}
                        style={({ isActive }) => ({
                           background: isActive
                              ? (isDarkMode ? 'rgba(255, 255, 255, 0.08)' : 'rgba(69, 153, 191, 0.08)')
                              : 'transparent',
                           color: isActive
                              ? palette.primary.main
                              : (isDarkMode ? palette.text.primary : palette.text.primary),
                           borderLeft: isActive ? `3px solid ${palette.primary.main}` : '3px solid transparent',
                           borderRadius: '0 4px 4px 0',
                           paddingLeft: '13px',
                        })}
                     >
                        <Inbox
                           sx={{
                              color: 'inherit',
                              opacity: isDarkMode ? 0.7 : 0.6
                           }}
                        />
                        <ListItemText
                           primary={name}
                           primaryTypographyProps={{
                              fontSize: '0.875rem',
                              fontWeight: 500
                           }}
                        />
                     </NavLink>
                  </ListItem>
               </Fragment>
            ))}
         </List>
      </Drawer>
   );
};
